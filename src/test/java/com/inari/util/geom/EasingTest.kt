package com.inari.util.geom

import org.junit.Assert.assertEquals

import java.util.ArrayList

import org.junit.Test

class EasingTest {

    @Test
    fun testLinearPositiveAndNegative() {
        var startValue = 0f
        var changeInValue = 5f
        val duration: Long = 10

        val values = ArrayList<Float>()
        for (time in 0..9) {
            values.add(Easing.Type.LINEAR(time, startValue, changeInValue, duration))
        }

        assertEquals(
            "[0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5]",
            values.toString()
        )

        startValue = 5f
        changeInValue = 0f
        values.clear()

        val inverse = changeInValue - startValue < 0
        for (time in 0..9) {
            if (inverse) {
                values.add(startValue - Easing.Type.LINEAR(time, changeInValue, startValue, duration))
            }
        }

        assertEquals(
            "[5.0, 4.5, 4.0, 3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5]",
            values.toString()
        )
    }

    @Test
    fun testAll() {
        val startValue = 0f
        val changeInValue = 5f
        val duration: Long = 10

        val values = ArrayList<Float>()
        for (easing in Easing.Type.values()) {
            for (time in 0..9) {
                values.add(easing(time, startValue, changeInValue, duration))
            }
        }

        assertEquals(
            "[0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, " +
                "0.0, 0.05, 0.2, 0.45000002, 0.8, 1.25, 1.8000001, 2.45, 3.2, 4.0499997, " +
                "0.0, 0.95, 1.8, 2.5500002, 3.2, 3.75, 4.2, 4.5499997, 4.8, 4.9500003, " +
                "0.0, 0.1, 0.4, 0.90000004, 1.6, 2.5, 3.4000003, 4.1, 4.6, 4.9, " +
                "0.0, 0.0050000004, 0.040000003, 0.135, 0.32000002, 0.625, 1.08, 1.715, 2.5600002, 3.6449997, " +
                "0.0, 1.3550005, 2.4399998, 3.285, 3.9199998, 4.375, 4.68, 4.865, 4.96, 4.995, " +
                "0.0, 0.020000001, 0.16000001, 0.54, 1.2800001, 2.5, 3.7200003, 4.46, 4.84, 4.98, " +
                "0.0, 5.0E-4, 0.008, 0.040500004, 0.128, 0.3125, 0.64800006, 1.2005, 2.048, 3.2804997, " +
                "0.0, 1.7195004, 2.952, 3.7995, 4.3519998, 4.6875, 4.8719997, 4.9595003, 4.9919996, 4.9995, " +
                "0.0, 0.004, 0.064, 0.32400003, 1.024, 2.5, 3.9760003, 4.6759996, 4.936, 4.996, " +
                "0.0, 5.0000002E-5, 0.0016000001, 0.012150002, 0.051200002, 0.15625, 0.38880005, 0.84035, 1.6384001, 2.9524496, " +
                "0.0, 2.0475504, 3.3616, 4.1596503, 4.6112003, 4.84375, 4.9488, 4.9878497, 4.9983997, 4.99995, " +
                "0.0, 8.0000004E-4, 0.025600001, 0.19440003, 0.81920004, 2.5, 4.1808004, 4.8056, 4.9744, 4.9992, " +
                "0.0048828125, 0.009765625, 0.01953125, 0.0390625, 0.078125, 0.15625, 0.31250003, 0.625, 1.2500001, 2.4999995, " +
                "0.0, 2.5, 3.75, 4.375, 4.6875, 4.84375, 4.921875, 4.9609375, 4.9804688, 4.9902344, " +
                "0.0024414062, 0.009765625, 0.0390625, 0.15625001, 0.62500006, 2.5, 4.3750005, 4.84375, 4.9609375, 4.9902344, " +
                "0.0, 0.061558247, 0.24471712, 0.5449672, 0.95491505, 1.4644661, 2.061074, 2.7300475, 3.454915, 4.217828, " +
                "0.0, 0.7821724, 1.545085, 2.2699528, 2.9389262, 3.535534, 4.0450854, 4.455033, 4.755283, 4.9384418, " +
                "0.0, 0.12235865, 0.4774575, 1.0305369, 1.7274576, 2.5, 3.2725427, 3.9694638, 4.5225425, 4.877641, " +
                "0.0, 0.025062859, 0.101020634, 0.230304, 0.41742444, 0.66987306, 0.99999994, 1.4292858, 2.0000002, 2.8205502, " +
                "0.0, 2.1794498, 2.9999998, 3.5707142, 4.0, 4.330127, 4.582576, 4.769696, 4.898979, 4.974937, " +
                "0.0, 0.050510317, 0.20871222, 0.49999997, 1.0000001, 2.5, 4.0000005, 4.5, 4.791288, 4.9494896]",
            values.toString()
        )
    }

}
